"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _reactMomentProptypes = require('react-moment-proptypes');

var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('./Month.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Month = function Month(_ref) {
    var displayedStartDate = _ref.displayedStartDate;
    var date = _ref.date;
    var defaultDate = _ref.defaultDate;
    var _ref$DayComponent = _ref.DayComponent;
    var DayComponent = _ref$DayComponent === undefined ? require('./Day.js') : _ref$DayComponent;
    var dayProps = _ref.dayProps;
    var onSelect = _ref.onSelect;
    var timezone = _ref.timezone;


    var firstDayOfWeek = _moment2.default.localeData().firstDayOfWeek();
    var startOfMonth = displayedStartDate;
    var firstDayOfMonth = startOfMonth.day();
    var firstDisplayedDate = startOfMonth.clone().subtract((firstDayOfMonth - firstDayOfWeek + 7) % 7, 'days');
    var groupedDates = [];

    var cursor = firstDisplayedDate.clone();

    while (true) {
        var line = void 0;
        groupedDates.push(line = []);
        for (var i = 0; i < 7; i++) {
            line.push(cursor);
            cursor = cursor.clone().add(1, 'day').add(1, 'hour').startOf('day');
        }
        if (cursor.diff(displayedStartDate, 'month') > 0) {
            break;
        }
    }

    var dateDayStart = date && date.clone().startOf('day');
    var defaultDateDayStart = (defaultDate.clone() || (0, _moment2.default)().tz(timezone)).startOf('day');
    var weekdaysShort = _moment2.default.localeData()._weekdaysShort;

    return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
            'table',
            { className: 'rm_calendarMonth' },
            _react2.default.createElement(
                'thead',
                null,
                _react2.default.createElement(
                    'tr',
                    null,
                    weekdaysShort.slice(firstDayOfWeek).concat(weekdaysShort.slice(0, firstDayOfWeek)).map(function (weekday, columnIndex) {
                        return _react2.default.createElement(
                            'th',
                            { key: columnIndex, className: 'rm_calendarMonth-weekdayHead' },
                            weekday
                        );
                    })
                )
            ),
            _react2.default.createElement(
                'tbody',
                null,
                groupedDates.map(function (line, rowIndex) {
                    return _react2.default.createElement(
                        'tr',
                        { key: rowIndex },
                        line.map(function (cellDate, columnIndex) {
                            var isSelected = !!date && Math.abs(cellDate.diff(dateDayStart, 'hours')) < 12;
                            var isDefault = Math.abs(cellDate.diff(defaultDateDayStart, 'hours')) < 12;
                            var currentDayProps = (typeof dayProps === 'function' ? dayProps({ cellDate: cellDate, rowIndex: rowIndex, columnIndex: columnIndex }) : dayProps) || {};
                            return _react2.default.createElement(
                                'td',
                                { key: rowIndex * 7 + columnIndex,
                                    className: (0, _classnames2.default)('rm_calendarMonth-cell', {
                                        'rm_calendarMonth-cell--selected': isSelected,
                                        'rm_calendarMonth-cell--default': isDefault
                                    })
                                },
                                _react2.default.createElement(DayComponent, _extends({
                                    date: cellDate,
                                    displayedStartDate: displayedStartDate,
                                    isSelected: isSelected,
                                    isDefault: isDefault,
                                    onClick: function onClick() {
                                        return onSelect(cellDate.clone());
                                    },
                                    timezone: timezone
                                }, currentDayProps))
                            );
                        })
                    );
                })
            )
        )
    );
};

Month.propTypes = {
    displayedStartDate: _reactMomentProptypes2.default.momentObj,
    date: _reactMomentProptypes2.default.momentObj,
    defaultDate: _reactMomentProptypes2.default.momentObj,
    DayComponent: _react2.default.PropTypes.func,
    onSelect: _react2.default.PropTypes.func,
    dayProps: _react2.default.PropTypes.object,
    timezone: _react2.default.PropTypes.string
};

exports.default = Month;
module.exports = exports['default'];