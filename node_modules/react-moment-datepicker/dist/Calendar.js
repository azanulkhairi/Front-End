"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactMomentProptypes = require('react-moment-proptypes');

var _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _Month = require('./Month.js');

var _Month2 = _interopRequireDefault(_Month);

require('./Calendar.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Calendar = function (_React$Component) {
    _inherits(Calendar, _React$Component);

    function Calendar() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Calendar);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            displayedStartDate: null
        }, _this._slideDirection = '', _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Calendar, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.resetStartFromProps();
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.timezone !== this.props.timezone) {
                this.resetStartFromProps(nextProps);
            }
        }
    }, {
        key: 'componentWillUpdate',
        value: function componentWillUpdate(nextProps, nextState) {
            var dayDiff = nextState.displayedStartDate.diff(this.state.displayedStartDate, 'days');
            this._slideDirection = dayDiff > 1 ? 'right' : dayDiff < -1 ? 'left' : '';
        }
    }, {
        key: 'resetStartFromProps',
        value: function resetStartFromProps() {
            var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

            var date = (props.date || props.defaultDate).clone();
            if (props.timezone) {
                date.tz(props.timezone);
            }
            this.resetStartFromDate(date.startOf('month'));
        }
    }, {
        key: 'resetStartFromDate',
        value: function resetStartFromDate() {
            var date = arguments.length <= 0 || arguments[0] === undefined ? this.props.date : arguments[0];

            this.setStart(date.clone().startOf('month'));
        }
    }, {
        key: 'setStart',
        value: function setStart(displayedStartDate) {
            this.setState({ displayedStartDate: displayedStartDate });
        }
    }, {
        key: 'translateStart',
        value: function translateStart(amount, unit) {
            var target = this.state.displayedStartDate.clone().add(amount, unit);
            this.setStart(target);
            if (this.props.onNavigate && amount) {
                this.props.onNavigate(amount < 0 ? 'previous' : 'next', unit);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props;
            var defaultDate = _props.defaultDate;
            var onSelect = _props.onSelect;
            var date = _props.date;
            var dayProps = _props.dayProps;
            var DayComponent = _props.DayComponent;
            var headerFormat = _props.headerFormat;
            var footerFormat = _props.footerFormat;
            var timezone = _props.timezone;
            var displayedStartDate = this.state.displayedStartDate;


            return _react2.default.createElement(
                'div',
                { className: 'rm_calendar' },
                _react2.default.createElement(
                    'div',
                    { className: 'rm_calendar-header' },
                    _react2.default.createElement(
                        'button',
                        {
                            className: 'rm_calendar-btn rm_calendar-monthSwitch rm_calendar-monthSwitch--previous',
                            onClick: function onClick() {
                                return _this2.translateStart(-1, 'month');
                            }
                        },
                        '<'
                    ),
                    _react2.default.createElement(
                        'div',
                        {
                            className: 'rm_calendar-currentMonth'
                        },
                        displayedStartDate.format(headerFormat)
                    ),
                    _react2.default.createElement(
                        'button',
                        {
                            className: 'rm_calendar-btn rm_calendar-monthSwitch rm_calendar-monthSwitch--next',
                            onClick: function onClick() {
                                return _this2.translateStart(1, 'month');
                            }
                        },
                        '>'
                    )
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'rm_calendar-body' },
                    _react2.default.createElement(
                        _reactAddonsCssTransitionGroup2.default,
                        {
                            transitionName: this._slideDirection ? 'rm_slide-' + this._slideDirection : '',
                            transitionEnterTimeout: 100,
                            transitionLeaveTimeout: 100
                        },
                        _react2.default.createElement(_Month2.default, {
                            key: displayedStartDate.format('YYYY-MM-DD'),
                            displayedStartDate: displayedStartDate,
                            date: date,
                            defaultDate: defaultDate,
                            DayComponent: DayComponent,
                            dayProps: dayProps,
                            onSelect: onSelect,
                            timezone: timezone
                        })
                    )
                ),
                _react2.default.createElement(
                    'button',
                    { className: 'rm_calendar-footer', onClick: function onClick() {
                            return onSelect(defaultDate.clone());
                        } },
                    defaultDate.format(footerFormat)
                )
            );
        }
    }]);

    return Calendar;
}(_react2.default.Component);

Calendar.propTypes = {
    defaultDate: _reactMomentProptypes2.default.momentObj,
    onSelect: _react2.default.PropTypes.func,
    onNavigate: _react2.default.PropTypes.func,
    date: _reactMomentProptypes2.default.momentObj,
    dayProps: _react2.default.PropTypes.object,
    DayComponent: _react2.default.PropTypes.func,
    headerFormat: _react2.default.PropTypes.string,
    footerFormat: _react2.default.PropTypes.string,
    timezone: _react2.default.PropTypes.string
};
exports.default = Calendar;
module.exports = exports['default'];